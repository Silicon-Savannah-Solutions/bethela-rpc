// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: provider_interface.proto

package bethela_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProviderInterface_C2B_FullMethodName             = "/wallet.ProviderInterface/C2B"
	ProviderInterface_B2C_FullMethodName             = "/wallet.ProviderInterface/B2C"
	ProviderInterface_TransactionInfo_FullMethodName = "/wallet.ProviderInterface/TransactionInfo"
)

// ProviderInterfaceClient is the client API for ProviderInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ProviderInterface - Standard API that each mobile money provider MUST implement
// Each MNO (M-Pesa, MTN, Airtel, etc.) will implement this interface
type ProviderInterfaceClient interface {
	C2B(ctx context.Context, in *MnoC2BRequest, opts ...grpc.CallOption) (*MnoTransactionResponse, error)
	B2C(ctx context.Context, in *MnoB2CRequest, opts ...grpc.CallOption) (*MnoTransactionResponse, error)
	TransactionInfo(ctx context.Context, in *MnoTransactionRequest, opts ...grpc.CallOption) (*MnoTransactionResponse, error)
}

type providerInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderInterfaceClient(cc grpc.ClientConnInterface) ProviderInterfaceClient {
	return &providerInterfaceClient{cc}
}

func (c *providerInterfaceClient) C2B(ctx context.Context, in *MnoC2BRequest, opts ...grpc.CallOption) (*MnoTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MnoTransactionResponse)
	err := c.cc.Invoke(ctx, ProviderInterface_C2B_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerInterfaceClient) B2C(ctx context.Context, in *MnoB2CRequest, opts ...grpc.CallOption) (*MnoTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MnoTransactionResponse)
	err := c.cc.Invoke(ctx, ProviderInterface_B2C_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerInterfaceClient) TransactionInfo(ctx context.Context, in *MnoTransactionRequest, opts ...grpc.CallOption) (*MnoTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MnoTransactionResponse)
	err := c.cc.Invoke(ctx, ProviderInterface_TransactionInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderInterfaceServer is the server API for ProviderInterface service.
// All implementations must embed UnimplementedProviderInterfaceServer
// for forward compatibility.
//
// ProviderInterface - Standard API that each mobile money provider MUST implement
// Each MNO (M-Pesa, MTN, Airtel, etc.) will implement this interface
type ProviderInterfaceServer interface {
	C2B(context.Context, *MnoC2BRequest) (*MnoTransactionResponse, error)
	B2C(context.Context, *MnoB2CRequest) (*MnoTransactionResponse, error)
	TransactionInfo(context.Context, *MnoTransactionRequest) (*MnoTransactionResponse, error)
	mustEmbedUnimplementedProviderInterfaceServer()
}

// UnimplementedProviderInterfaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProviderInterfaceServer struct{}

func (UnimplementedProviderInterfaceServer) C2B(context.Context, *MnoC2BRequest) (*MnoTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method C2B not implemented")
}
func (UnimplementedProviderInterfaceServer) B2C(context.Context, *MnoB2CRequest) (*MnoTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method B2C not implemented")
}
func (UnimplementedProviderInterfaceServer) TransactionInfo(context.Context, *MnoTransactionRequest) (*MnoTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionInfo not implemented")
}
func (UnimplementedProviderInterfaceServer) mustEmbedUnimplementedProviderInterfaceServer() {}
func (UnimplementedProviderInterfaceServer) testEmbeddedByValue()                           {}

// UnsafeProviderInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProviderInterfaceServer will
// result in compilation errors.
type UnsafeProviderInterfaceServer interface {
	mustEmbedUnimplementedProviderInterfaceServer()
}

func RegisterProviderInterfaceServer(s grpc.ServiceRegistrar, srv ProviderInterfaceServer) {
	// If the following call pancis, it indicates UnimplementedProviderInterfaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProviderInterface_ServiceDesc, srv)
}

func _ProviderInterface_C2B_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MnoC2BRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderInterfaceServer).C2B(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderInterface_C2B_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderInterfaceServer).C2B(ctx, req.(*MnoC2BRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderInterface_B2C_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MnoB2CRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderInterfaceServer).B2C(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderInterface_B2C_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderInterfaceServer).B2C(ctx, req.(*MnoB2CRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderInterface_TransactionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MnoTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderInterfaceServer).TransactionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderInterface_TransactionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderInterfaceServer).TransactionInfo(ctx, req.(*MnoTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProviderInterface_ServiceDesc is the grpc.ServiceDesc for ProviderInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProviderInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wallet.ProviderInterface",
	HandlerType: (*ProviderInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "C2B",
			Handler:    _ProviderInterface_C2B_Handler,
		},
		{
			MethodName: "B2C",
			Handler:    _ProviderInterface_B2C_Handler,
		},
		{
			MethodName: "TransactionInfo",
			Handler:    _ProviderInterface_TransactionInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provider_interface.proto",
}
