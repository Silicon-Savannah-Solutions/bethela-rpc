// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: provider_interface.proto

package bethela_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProviderInterface_InitiatePayment_FullMethodName        = "/provider.ProviderInterface/InitiatePayment"
	ProviderInterface_SendMoney_FullMethodName              = "/provider.ProviderInterface/SendMoney"
	ProviderInterface_CheckTransactionStatus_FullMethodName = "/provider.ProviderInterface/CheckTransactionStatus"
	ProviderInterface_GetAccountBalance_FullMethodName      = "/provider.ProviderInterface/GetAccountBalance"
	ProviderInterface_ValidateAccount_FullMethodName        = "/provider.ProviderInterface/ValidateAccount"
	ProviderInterface_ReverseTransaction_FullMethodName     = "/provider.ProviderInterface/ReverseTransaction"
)

// ProviderInterfaceClient is the client API for ProviderInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ProviderInterface - Standard API that each mobile money provider MUST implement
// Each MNO (M-Pesa, MTN, Airtel, etc.) will implement this interface
type ProviderInterfaceClient interface {
	// Initiate a payment from customer to business (C2B)
	InitiatePayment(ctx context.Context, in *InitiatePaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error)
	// Send money from business to customer (B2C)
	SendMoney(ctx context.Context, in *SendMoneyRequest, opts ...grpc.CallOption) (*PaymentResponse, error)
	// Check status of a transaction
	CheckTransactionStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Get account balance
	GetAccountBalance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	// Validate a customer account
	ValidateAccount(ctx context.Context, in *ValidateAccountRequest, opts ...grpc.CallOption) (*ValidateAccountResponse, error)
	// Reverse a transaction
	ReverseTransaction(ctx context.Context, in *ReversalRequest, opts ...grpc.CallOption) (*ReversalResponse, error)
}

type providerInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderInterfaceClient(cc grpc.ClientConnInterface) ProviderInterfaceClient {
	return &providerInterfaceClient{cc}
}

func (c *providerInterfaceClient) InitiatePayment(ctx context.Context, in *InitiatePaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, ProviderInterface_InitiatePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerInterfaceClient) SendMoney(ctx context.Context, in *SendMoneyRequest, opts ...grpc.CallOption) (*PaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, ProviderInterface_SendMoney_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerInterfaceClient) CheckTransactionStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, ProviderInterface_CheckTransactionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerInterfaceClient) GetAccountBalance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, ProviderInterface_GetAccountBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerInterfaceClient) ValidateAccount(ctx context.Context, in *ValidateAccountRequest, opts ...grpc.CallOption) (*ValidateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateAccountResponse)
	err := c.cc.Invoke(ctx, ProviderInterface_ValidateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerInterfaceClient) ReverseTransaction(ctx context.Context, in *ReversalRequest, opts ...grpc.CallOption) (*ReversalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReversalResponse)
	err := c.cc.Invoke(ctx, ProviderInterface_ReverseTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderInterfaceServer is the server API for ProviderInterface service.
// All implementations must embed UnimplementedProviderInterfaceServer
// for forward compatibility.
//
// ProviderInterface - Standard API that each mobile money provider MUST implement
// Each MNO (M-Pesa, MTN, Airtel, etc.) will implement this interface
type ProviderInterfaceServer interface {
	// Initiate a payment from customer to business (C2B)
	InitiatePayment(context.Context, *InitiatePaymentRequest) (*PaymentResponse, error)
	// Send money from business to customer (B2C)
	SendMoney(context.Context, *SendMoneyRequest) (*PaymentResponse, error)
	// Check status of a transaction
	CheckTransactionStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	// Get account balance
	GetAccountBalance(context.Context, *BalanceRequest) (*BalanceResponse, error)
	// Validate a customer account
	ValidateAccount(context.Context, *ValidateAccountRequest) (*ValidateAccountResponse, error)
	// Reverse a transaction
	ReverseTransaction(context.Context, *ReversalRequest) (*ReversalResponse, error)
	mustEmbedUnimplementedProviderInterfaceServer()
}

// UnimplementedProviderInterfaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProviderInterfaceServer struct{}

func (UnimplementedProviderInterfaceServer) InitiatePayment(context.Context, *InitiatePaymentRequest) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiatePayment not implemented")
}
func (UnimplementedProviderInterfaceServer) SendMoney(context.Context, *SendMoneyRequest) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMoney not implemented")
}
func (UnimplementedProviderInterfaceServer) CheckTransactionStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTransactionStatus not implemented")
}
func (UnimplementedProviderInterfaceServer) GetAccountBalance(context.Context, *BalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBalance not implemented")
}
func (UnimplementedProviderInterfaceServer) ValidateAccount(context.Context, *ValidateAccountRequest) (*ValidateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAccount not implemented")
}
func (UnimplementedProviderInterfaceServer) ReverseTransaction(context.Context, *ReversalRequest) (*ReversalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReverseTransaction not implemented")
}
func (UnimplementedProviderInterfaceServer) mustEmbedUnimplementedProviderInterfaceServer() {}
func (UnimplementedProviderInterfaceServer) testEmbeddedByValue()                           {}

// UnsafeProviderInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProviderInterfaceServer will
// result in compilation errors.
type UnsafeProviderInterfaceServer interface {
	mustEmbedUnimplementedProviderInterfaceServer()
}

func RegisterProviderInterfaceServer(s grpc.ServiceRegistrar, srv ProviderInterfaceServer) {
	// If the following call pancis, it indicates UnimplementedProviderInterfaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProviderInterface_ServiceDesc, srv)
}

func _ProviderInterface_InitiatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderInterfaceServer).InitiatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderInterface_InitiatePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderInterfaceServer).InitiatePayment(ctx, req.(*InitiatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderInterface_SendMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderInterfaceServer).SendMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderInterface_SendMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderInterfaceServer).SendMoney(ctx, req.(*SendMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderInterface_CheckTransactionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderInterfaceServer).CheckTransactionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderInterface_CheckTransactionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderInterfaceServer).CheckTransactionStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderInterface_GetAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderInterfaceServer).GetAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderInterface_GetAccountBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderInterfaceServer).GetAccountBalance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderInterface_ValidateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderInterfaceServer).ValidateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderInterface_ValidateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderInterfaceServer).ValidateAccount(ctx, req.(*ValidateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderInterface_ReverseTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReversalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderInterfaceServer).ReverseTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProviderInterface_ReverseTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderInterfaceServer).ReverseTransaction(ctx, req.(*ReversalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProviderInterface_ServiceDesc is the grpc.ServiceDesc for ProviderInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProviderInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "provider.ProviderInterface",
	HandlerType: (*ProviderInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitiatePayment",
			Handler:    _ProviderInterface_InitiatePayment_Handler,
		},
		{
			MethodName: "SendMoney",
			Handler:    _ProviderInterface_SendMoney_Handler,
		},
		{
			MethodName: "CheckTransactionStatus",
			Handler:    _ProviderInterface_CheckTransactionStatus_Handler,
		},
		{
			MethodName: "GetAccountBalance",
			Handler:    _ProviderInterface_GetAccountBalance_Handler,
		},
		{
			MethodName: "ValidateAccount",
			Handler:    _ProviderInterface_ValidateAccount_Handler,
		},
		{
			MethodName: "ReverseTransaction",
			Handler:    _ProviderInterface_ReverseTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provider_interface.proto",
}
