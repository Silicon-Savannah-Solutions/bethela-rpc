// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: wallet.proto

package bethela_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WalletService_CreateWallet_FullMethodName                 = "/wallet.WalletService/CreateWallet"
	WalletService_GetWallet_FullMethodName                    = "/wallet.WalletService/GetWallet"
	WalletService_GetWalletByUser_FullMethodName              = "/wallet.WalletService/GetWalletByUser"
	WalletService_UpdateWallet_FullMethodName                 = "/wallet.WalletService/UpdateWallet"
	WalletService_GetBalance_FullMethodName                   = "/wallet.WalletService/GetBalance"
	WalletService_ListTransactions_FullMethodName             = "/wallet.WalletService/ListTransactions"
	WalletService_DepositViaMobileMoney_FullMethodName        = "/wallet.WalletService/DepositViaMobileMoney"
	WalletService_WithdrawToMobileMoney_FullMethodName        = "/wallet.WalletService/WithdrawToMobileMoney"
	WalletService_TransferFunds_FullMethodName                = "/wallet.WalletService/TransferFunds"
	WalletService_PayMerchant_FullMethodName                  = "/wallet.WalletService/PayMerchant"
	WalletService_GetTransactionStatus_FullMethodName         = "/wallet.WalletService/GetTransactionStatus"
	WalletService_RequestRefund_FullMethodName                = "/wallet.WalletService/RequestRefund"
	WalletService_AddMobileMoneyAccount_FullMethodName        = "/wallet.WalletService/AddMobileMoneyAccount"
	WalletService_RemoveMobileMoneyAccount_FullMethodName     = "/wallet.WalletService/RemoveMobileMoneyAccount"
	WalletService_ListMobileMoneyAccounts_FullMethodName      = "/wallet.WalletService/ListMobileMoneyAccounts"
	WalletService_SetDefaultMobileMoneyAccount_FullMethodName = "/wallet.WalletService/SetDefaultMobileMoneyAccount"
	WalletService_HoldFunds_FullMethodName                    = "/wallet.WalletService/HoldFunds"
	WalletService_DeductHeldFunds_FullMethodName              = "/wallet.WalletService/DeductHeldFunds"
)

// WalletServiceClient is the client API for WalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// WalletService provides APIs for digital wallet management and mobile money operations
type WalletServiceClient interface {
	// Create a new wallet for a user
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*Wallet, error)
	// Get wallet by ID
	GetWallet(ctx context.Context, in *GetWalletRequest, opts ...grpc.CallOption) (*Wallet, error)
	// Get wallet by user ID
	GetWalletByUser(ctx context.Context, in *GetWalletByUserRequest, opts ...grpc.CallOption) (*Wallet, error)
	// Update wallet information
	UpdateWallet(ctx context.Context, in *UpdateWalletRequest, opts ...grpc.CallOption) (*Wallet, error)
	// Get wallet balance
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	// List transactions for a wallet with pagination
	ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error)
	// Deposit funds into wallet via mobile money
	DepositViaMobileMoney(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*Transaction, error)
	// Withdraw funds from wallet to mobile money
	WithdrawToMobileMoney(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*Transaction, error)
	// Transfer funds between wallets
	TransferFunds(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*Transaction, error)
	// Pay merchant
	PayMerchant(ctx context.Context, in *PayMerchantRequest, opts ...grpc.CallOption) (*Transaction, error)
	// Get transaction status
	GetTransactionStatus(ctx context.Context, in *GetTransactionStatusRequest, opts ...grpc.CallOption) (*TransactionStatus, error)
	// Request refund for a transaction
	RequestRefund(ctx context.Context, in *RefundRequest, opts ...grpc.CallOption) (*RefundResponse, error)
	// Add mobile money account to wallet
	AddMobileMoneyAccount(ctx context.Context, in *AddMobileMoneyAccountRequest, opts ...grpc.CallOption) (*MobileMoneyAccount, error)
	// Remove mobile money account from wallet
	RemoveMobileMoneyAccount(ctx context.Context, in *RemoveMobileMoneyAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List mobile money accounts for a wallet
	ListMobileMoneyAccounts(ctx context.Context, in *ListMobileMoneyAccountsRequest, opts ...grpc.CallOption) (*ListMobileMoneyAccountsResponse, error)
	// Set default mobile money account for a wallet
	SetDefaultMobileMoneyAccount(ctx context.Context, in *SetDefaultMobileMoneyAccountRequest, opts ...grpc.CallOption) (*MobileMoneyAccount, error)
	// Methods to hold money and deduct after payment of service
	HoldFunds(ctx context.Context, in *HoldFundsRequest, opts ...grpc.CallOption) (*HoldFundsResponse, error)
	DeductHeldFunds(ctx context.Context, in *DeductHeldFundsRequest, opts ...grpc.CallOption) (*Transaction, error)
}

type walletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletServiceClient(cc grpc.ClientConnInterface) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*Wallet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wallet)
	err := c.cc.Invoke(ctx, WalletService_CreateWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetWallet(ctx context.Context, in *GetWalletRequest, opts ...grpc.CallOption) (*Wallet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wallet)
	err := c.cc.Invoke(ctx, WalletService_GetWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetWalletByUser(ctx context.Context, in *GetWalletByUserRequest, opts ...grpc.CallOption) (*Wallet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wallet)
	err := c.cc.Invoke(ctx, WalletService_GetWalletByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) UpdateWallet(ctx context.Context, in *UpdateWalletRequest, opts ...grpc.CallOption) (*Wallet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wallet)
	err := c.cc.Invoke(ctx, WalletService_UpdateWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, WalletService_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTransactionsResponse)
	err := c.cc.Invoke(ctx, WalletService_ListTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) DepositViaMobileMoney(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*Transaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transaction)
	err := c.cc.Invoke(ctx, WalletService_DepositViaMobileMoney_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) WithdrawToMobileMoney(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*Transaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transaction)
	err := c.cc.Invoke(ctx, WalletService_WithdrawToMobileMoney_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) TransferFunds(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*Transaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transaction)
	err := c.cc.Invoke(ctx, WalletService_TransferFunds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) PayMerchant(ctx context.Context, in *PayMerchantRequest, opts ...grpc.CallOption) (*Transaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transaction)
	err := c.cc.Invoke(ctx, WalletService_PayMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetTransactionStatus(ctx context.Context, in *GetTransactionStatusRequest, opts ...grpc.CallOption) (*TransactionStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionStatus)
	err := c.cc.Invoke(ctx, WalletService_GetTransactionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) RequestRefund(ctx context.Context, in *RefundRequest, opts ...grpc.CallOption) (*RefundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundResponse)
	err := c.cc.Invoke(ctx, WalletService_RequestRefund_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) AddMobileMoneyAccount(ctx context.Context, in *AddMobileMoneyAccountRequest, opts ...grpc.CallOption) (*MobileMoneyAccount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MobileMoneyAccount)
	err := c.cc.Invoke(ctx, WalletService_AddMobileMoneyAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) RemoveMobileMoneyAccount(ctx context.Context, in *RemoveMobileMoneyAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WalletService_RemoveMobileMoneyAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ListMobileMoneyAccounts(ctx context.Context, in *ListMobileMoneyAccountsRequest, opts ...grpc.CallOption) (*ListMobileMoneyAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMobileMoneyAccountsResponse)
	err := c.cc.Invoke(ctx, WalletService_ListMobileMoneyAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) SetDefaultMobileMoneyAccount(ctx context.Context, in *SetDefaultMobileMoneyAccountRequest, opts ...grpc.CallOption) (*MobileMoneyAccount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MobileMoneyAccount)
	err := c.cc.Invoke(ctx, WalletService_SetDefaultMobileMoneyAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) HoldFunds(ctx context.Context, in *HoldFundsRequest, opts ...grpc.CallOption) (*HoldFundsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HoldFundsResponse)
	err := c.cc.Invoke(ctx, WalletService_HoldFunds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) DeductHeldFunds(ctx context.Context, in *DeductHeldFundsRequest, opts ...grpc.CallOption) (*Transaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transaction)
	err := c.cc.Invoke(ctx, WalletService_DeductHeldFunds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServiceServer is the server API for WalletService service.
// All implementations must embed UnimplementedWalletServiceServer
// for forward compatibility.
//
// WalletService provides APIs for digital wallet management and mobile money operations
type WalletServiceServer interface {
	// Create a new wallet for a user
	CreateWallet(context.Context, *CreateWalletRequest) (*Wallet, error)
	// Get wallet by ID
	GetWallet(context.Context, *GetWalletRequest) (*Wallet, error)
	// Get wallet by user ID
	GetWalletByUser(context.Context, *GetWalletByUserRequest) (*Wallet, error)
	// Update wallet information
	UpdateWallet(context.Context, *UpdateWalletRequest) (*Wallet, error)
	// Get wallet balance
	GetBalance(context.Context, *GetBalanceRequest) (*BalanceResponse, error)
	// List transactions for a wallet with pagination
	ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error)
	// Deposit funds into wallet via mobile money
	DepositViaMobileMoney(context.Context, *DepositRequest) (*Transaction, error)
	// Withdraw funds from wallet to mobile money
	WithdrawToMobileMoney(context.Context, *WithdrawRequest) (*Transaction, error)
	// Transfer funds between wallets
	TransferFunds(context.Context, *TransferRequest) (*Transaction, error)
	// Pay merchant
	PayMerchant(context.Context, *PayMerchantRequest) (*Transaction, error)
	// Get transaction status
	GetTransactionStatus(context.Context, *GetTransactionStatusRequest) (*TransactionStatus, error)
	// Request refund for a transaction
	RequestRefund(context.Context, *RefundRequest) (*RefundResponse, error)
	// Add mobile money account to wallet
	AddMobileMoneyAccount(context.Context, *AddMobileMoneyAccountRequest) (*MobileMoneyAccount, error)
	// Remove mobile money account from wallet
	RemoveMobileMoneyAccount(context.Context, *RemoveMobileMoneyAccountRequest) (*emptypb.Empty, error)
	// List mobile money accounts for a wallet
	ListMobileMoneyAccounts(context.Context, *ListMobileMoneyAccountsRequest) (*ListMobileMoneyAccountsResponse, error)
	// Set default mobile money account for a wallet
	SetDefaultMobileMoneyAccount(context.Context, *SetDefaultMobileMoneyAccountRequest) (*MobileMoneyAccount, error)
	// Methods to hold money and deduct after payment of service
	HoldFunds(context.Context, *HoldFundsRequest) (*HoldFundsResponse, error)
	DeductHeldFunds(context.Context, *DeductHeldFundsRequest) (*Transaction, error)
	mustEmbedUnimplementedWalletServiceServer()
}

// UnimplementedWalletServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWalletServiceServer struct{}

func (UnimplementedWalletServiceServer) CreateWallet(context.Context, *CreateWalletRequest) (*Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedWalletServiceServer) GetWallet(context.Context, *GetWalletRequest) (*Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallet not implemented")
}
func (UnimplementedWalletServiceServer) GetWalletByUser(context.Context, *GetWalletByUserRequest) (*Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletByUser not implemented")
}
func (UnimplementedWalletServiceServer) UpdateWallet(context.Context, *UpdateWalletRequest) (*Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWallet not implemented")
}
func (UnimplementedWalletServiceServer) GetBalance(context.Context, *GetBalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedWalletServiceServer) ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}
func (UnimplementedWalletServiceServer) DepositViaMobileMoney(context.Context, *DepositRequest) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositViaMobileMoney not implemented")
}
func (UnimplementedWalletServiceServer) WithdrawToMobileMoney(context.Context, *WithdrawRequest) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawToMobileMoney not implemented")
}
func (UnimplementedWalletServiceServer) TransferFunds(context.Context, *TransferRequest) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferFunds not implemented")
}
func (UnimplementedWalletServiceServer) PayMerchant(context.Context, *PayMerchantRequest) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayMerchant not implemented")
}
func (UnimplementedWalletServiceServer) GetTransactionStatus(context.Context, *GetTransactionStatusRequest) (*TransactionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionStatus not implemented")
}
func (UnimplementedWalletServiceServer) RequestRefund(context.Context, *RefundRequest) (*RefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRefund not implemented")
}
func (UnimplementedWalletServiceServer) AddMobileMoneyAccount(context.Context, *AddMobileMoneyAccountRequest) (*MobileMoneyAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMobileMoneyAccount not implemented")
}
func (UnimplementedWalletServiceServer) RemoveMobileMoneyAccount(context.Context, *RemoveMobileMoneyAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMobileMoneyAccount not implemented")
}
func (UnimplementedWalletServiceServer) ListMobileMoneyAccounts(context.Context, *ListMobileMoneyAccountsRequest) (*ListMobileMoneyAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMobileMoneyAccounts not implemented")
}
func (UnimplementedWalletServiceServer) SetDefaultMobileMoneyAccount(context.Context, *SetDefaultMobileMoneyAccountRequest) (*MobileMoneyAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultMobileMoneyAccount not implemented")
}
func (UnimplementedWalletServiceServer) HoldFunds(context.Context, *HoldFundsRequest) (*HoldFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HoldFunds not implemented")
}
func (UnimplementedWalletServiceServer) DeductHeldFunds(context.Context, *DeductHeldFundsRequest) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeductHeldFunds not implemented")
}
func (UnimplementedWalletServiceServer) mustEmbedUnimplementedWalletServiceServer() {}
func (UnimplementedWalletServiceServer) testEmbeddedByValue()                       {}

// UnsafeWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServiceServer will
// result in compilation errors.
type UnsafeWalletServiceServer interface {
	mustEmbedUnimplementedWalletServiceServer()
}

func RegisterWalletServiceServer(s grpc.ServiceRegistrar, srv WalletServiceServer) {
	// If the following call pancis, it indicates UnimplementedWalletServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WalletService_ServiceDesc, srv)
}

func _WalletService_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CreateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetWallet(ctx, req.(*GetWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetWalletByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetWalletByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetWalletByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetWalletByUser(ctx, req.(*GetWalletByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_UpdateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).UpdateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_UpdateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).UpdateWallet(ctx, req.(*UpdateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ListTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ListTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_ListTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ListTransactions(ctx, req.(*ListTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_DepositViaMobileMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).DepositViaMobileMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_DepositViaMobileMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).DepositViaMobileMoney(ctx, req.(*DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_WithdrawToMobileMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).WithdrawToMobileMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_WithdrawToMobileMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).WithdrawToMobileMoney(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_TransferFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).TransferFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_TransferFunds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).TransferFunds(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_PayMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).PayMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_PayMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).PayMerchant(ctx, req.(*PayMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetTransactionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetTransactionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetTransactionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetTransactionStatus(ctx, req.(*GetTransactionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_RequestRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).RequestRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_RequestRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).RequestRefund(ctx, req.(*RefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_AddMobileMoneyAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMobileMoneyAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).AddMobileMoneyAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_AddMobileMoneyAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).AddMobileMoneyAccount(ctx, req.(*AddMobileMoneyAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_RemoveMobileMoneyAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMobileMoneyAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).RemoveMobileMoneyAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_RemoveMobileMoneyAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).RemoveMobileMoneyAccount(ctx, req.(*RemoveMobileMoneyAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ListMobileMoneyAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMobileMoneyAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ListMobileMoneyAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_ListMobileMoneyAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ListMobileMoneyAccounts(ctx, req.(*ListMobileMoneyAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_SetDefaultMobileMoneyAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultMobileMoneyAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).SetDefaultMobileMoneyAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_SetDefaultMobileMoneyAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).SetDefaultMobileMoneyAccount(ctx, req.(*SetDefaultMobileMoneyAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_HoldFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HoldFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).HoldFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_HoldFunds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).HoldFunds(ctx, req.(*HoldFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_DeductHeldFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeductHeldFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).DeductHeldFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_DeductHeldFunds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).DeductHeldFunds(ctx, req.(*DeductHeldFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletService_ServiceDesc is the grpc.ServiceDesc for WalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wallet.WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWallet",
			Handler:    _WalletService_CreateWallet_Handler,
		},
		{
			MethodName: "GetWallet",
			Handler:    _WalletService_GetWallet_Handler,
		},
		{
			MethodName: "GetWalletByUser",
			Handler:    _WalletService_GetWalletByUser_Handler,
		},
		{
			MethodName: "UpdateWallet",
			Handler:    _WalletService_UpdateWallet_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _WalletService_GetBalance_Handler,
		},
		{
			MethodName: "ListTransactions",
			Handler:    _WalletService_ListTransactions_Handler,
		},
		{
			MethodName: "DepositViaMobileMoney",
			Handler:    _WalletService_DepositViaMobileMoney_Handler,
		},
		{
			MethodName: "WithdrawToMobileMoney",
			Handler:    _WalletService_WithdrawToMobileMoney_Handler,
		},
		{
			MethodName: "TransferFunds",
			Handler:    _WalletService_TransferFunds_Handler,
		},
		{
			MethodName: "PayMerchant",
			Handler:    _WalletService_PayMerchant_Handler,
		},
		{
			MethodName: "GetTransactionStatus",
			Handler:    _WalletService_GetTransactionStatus_Handler,
		},
		{
			MethodName: "RequestRefund",
			Handler:    _WalletService_RequestRefund_Handler,
		},
		{
			MethodName: "AddMobileMoneyAccount",
			Handler:    _WalletService_AddMobileMoneyAccount_Handler,
		},
		{
			MethodName: "RemoveMobileMoneyAccount",
			Handler:    _WalletService_RemoveMobileMoneyAccount_Handler,
		},
		{
			MethodName: "ListMobileMoneyAccounts",
			Handler:    _WalletService_ListMobileMoneyAccounts_Handler,
		},
		{
			MethodName: "SetDefaultMobileMoneyAccount",
			Handler:    _WalletService_SetDefaultMobileMoneyAccount_Handler,
		},
		{
			MethodName: "HoldFunds",
			Handler:    _WalletService_HoldFunds_Handler,
		},
		{
			MethodName: "DeductHeldFunds",
			Handler:    _WalletService_DeductHeldFunds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wallet.proto",
}
