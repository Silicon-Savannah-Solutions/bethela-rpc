// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: casino_service.proto

package bethela_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CasinoService_ListGames_FullMethodName        = "/casino.CasinoService/ListGames"
	CasinoService_GetGame_FullMethodName          = "/casino.CasinoService/GetGame"
	CasinoService_GetCategories_FullMethodName    = "/casino.CasinoService/GetCategories"
	CasinoService_GetProviders_FullMethodName     = "/casino.CasinoService/GetProviders"
	CasinoService_LaunchGame_FullMethodName       = "/casino.CasinoService/LaunchGame"
	CasinoService_GetPlayerHistory_FullMethodName = "/casino.CasinoService/GetPlayerHistory"
	CasinoService_ProcessBet_FullMethodName       = "/casino.CasinoService/ProcessBet"
	CasinoService_ProcessWin_FullMethodName       = "/casino.CasinoService/ProcessWin"
	CasinoService_ProcessRollback_FullMethodName  = "/casino.CasinoService/ProcessRollback"
)

// CasinoServiceClient is the client API for CasinoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CasinoService provides APIs for casino games operations
type CasinoServiceClient interface {
	// List available games with filtering and pagination
	ListGames(ctx context.Context, in *ListGamesRequest, opts ...grpc.CallOption) (*ListGamesResponse, error)
	// Get game details
	GetGame(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*Game, error)
	// Get game categories
	GetCategories(ctx context.Context, in *GetCategoriesRequest, opts ...grpc.CallOption) (*GetCategoriesResponse, error)
	// Get game providers
	GetProviders(ctx context.Context, in *GetProvidersRequest, opts ...grpc.CallOption) (*GetProvidersResponse, error)
	// Launch a game session
	LaunchGame(ctx context.Context, in *LaunchGameRequest, opts ...grpc.CallOption) (*LaunchGameResponse, error)
	// Get player game history
	GetPlayerHistory(ctx context.Context, in *GetPlayerHistoryRequest, opts ...grpc.CallOption) (*GetPlayerHistoryResponse, error)
	// Internal methods used by the casino service
	ProcessBet(ctx context.Context, in *ProcessBetRequest, opts ...grpc.CallOption) (*ProcessBetResponse, error)
	ProcessWin(ctx context.Context, in *ProcessWinRequest, opts ...grpc.CallOption) (*ProcessWinResponse, error)
	ProcessRollback(ctx context.Context, in *ProcessRollbackRequest, opts ...grpc.CallOption) (*ProcessRollbackResponse, error)
}

type casinoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCasinoServiceClient(cc grpc.ClientConnInterface) CasinoServiceClient {
	return &casinoServiceClient{cc}
}

func (c *casinoServiceClient) ListGames(ctx context.Context, in *ListGamesRequest, opts ...grpc.CallOption) (*ListGamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGamesResponse)
	err := c.cc.Invoke(ctx, CasinoService_ListGames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casinoServiceClient) GetGame(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*Game, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Game)
	err := c.cc.Invoke(ctx, CasinoService_GetGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casinoServiceClient) GetCategories(ctx context.Context, in *GetCategoriesRequest, opts ...grpc.CallOption) (*GetCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCategoriesResponse)
	err := c.cc.Invoke(ctx, CasinoService_GetCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casinoServiceClient) GetProviders(ctx context.Context, in *GetProvidersRequest, opts ...grpc.CallOption) (*GetProvidersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProvidersResponse)
	err := c.cc.Invoke(ctx, CasinoService_GetProviders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casinoServiceClient) LaunchGame(ctx context.Context, in *LaunchGameRequest, opts ...grpc.CallOption) (*LaunchGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LaunchGameResponse)
	err := c.cc.Invoke(ctx, CasinoService_LaunchGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casinoServiceClient) GetPlayerHistory(ctx context.Context, in *GetPlayerHistoryRequest, opts ...grpc.CallOption) (*GetPlayerHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlayerHistoryResponse)
	err := c.cc.Invoke(ctx, CasinoService_GetPlayerHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casinoServiceClient) ProcessBet(ctx context.Context, in *ProcessBetRequest, opts ...grpc.CallOption) (*ProcessBetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessBetResponse)
	err := c.cc.Invoke(ctx, CasinoService_ProcessBet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casinoServiceClient) ProcessWin(ctx context.Context, in *ProcessWinRequest, opts ...grpc.CallOption) (*ProcessWinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessWinResponse)
	err := c.cc.Invoke(ctx, CasinoService_ProcessWin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casinoServiceClient) ProcessRollback(ctx context.Context, in *ProcessRollbackRequest, opts ...grpc.CallOption) (*ProcessRollbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessRollbackResponse)
	err := c.cc.Invoke(ctx, CasinoService_ProcessRollback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CasinoServiceServer is the server API for CasinoService service.
// All implementations must embed UnimplementedCasinoServiceServer
// for forward compatibility.
//
// CasinoService provides APIs for casino games operations
type CasinoServiceServer interface {
	// List available games with filtering and pagination
	ListGames(context.Context, *ListGamesRequest) (*ListGamesResponse, error)
	// Get game details
	GetGame(context.Context, *GetGameRequest) (*Game, error)
	// Get game categories
	GetCategories(context.Context, *GetCategoriesRequest) (*GetCategoriesResponse, error)
	// Get game providers
	GetProviders(context.Context, *GetProvidersRequest) (*GetProvidersResponse, error)
	// Launch a game session
	LaunchGame(context.Context, *LaunchGameRequest) (*LaunchGameResponse, error)
	// Get player game history
	GetPlayerHistory(context.Context, *GetPlayerHistoryRequest) (*GetPlayerHistoryResponse, error)
	// Internal methods used by the casino service
	ProcessBet(context.Context, *ProcessBetRequest) (*ProcessBetResponse, error)
	ProcessWin(context.Context, *ProcessWinRequest) (*ProcessWinResponse, error)
	ProcessRollback(context.Context, *ProcessRollbackRequest) (*ProcessRollbackResponse, error)
	mustEmbedUnimplementedCasinoServiceServer()
}

// UnimplementedCasinoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCasinoServiceServer struct{}

func (UnimplementedCasinoServiceServer) ListGames(context.Context, *ListGamesRequest) (*ListGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGames not implemented")
}
func (UnimplementedCasinoServiceServer) GetGame(context.Context, *GetGameRequest) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGame not implemented")
}
func (UnimplementedCasinoServiceServer) GetCategories(context.Context, *GetCategoriesRequest) (*GetCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategories not implemented")
}
func (UnimplementedCasinoServiceServer) GetProviders(context.Context, *GetProvidersRequest) (*GetProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviders not implemented")
}
func (UnimplementedCasinoServiceServer) LaunchGame(context.Context, *LaunchGameRequest) (*LaunchGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchGame not implemented")
}
func (UnimplementedCasinoServiceServer) GetPlayerHistory(context.Context, *GetPlayerHistoryRequest) (*GetPlayerHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerHistory not implemented")
}
func (UnimplementedCasinoServiceServer) ProcessBet(context.Context, *ProcessBetRequest) (*ProcessBetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessBet not implemented")
}
func (UnimplementedCasinoServiceServer) ProcessWin(context.Context, *ProcessWinRequest) (*ProcessWinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessWin not implemented")
}
func (UnimplementedCasinoServiceServer) ProcessRollback(context.Context, *ProcessRollbackRequest) (*ProcessRollbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessRollback not implemented")
}
func (UnimplementedCasinoServiceServer) mustEmbedUnimplementedCasinoServiceServer() {}
func (UnimplementedCasinoServiceServer) testEmbeddedByValue()                       {}

// UnsafeCasinoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CasinoServiceServer will
// result in compilation errors.
type UnsafeCasinoServiceServer interface {
	mustEmbedUnimplementedCasinoServiceServer()
}

func RegisterCasinoServiceServer(s grpc.ServiceRegistrar, srv CasinoServiceServer) {
	// If the following call pancis, it indicates UnimplementedCasinoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CasinoService_ServiceDesc, srv)
}

func _CasinoService_ListGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasinoServiceServer).ListGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasinoService_ListGames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasinoServiceServer).ListGames(ctx, req.(*ListGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasinoService_GetGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasinoServiceServer).GetGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasinoService_GetGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasinoServiceServer).GetGame(ctx, req.(*GetGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasinoService_GetCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasinoServiceServer).GetCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasinoService_GetCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasinoServiceServer).GetCategories(ctx, req.(*GetCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasinoService_GetProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasinoServiceServer).GetProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasinoService_GetProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasinoServiceServer).GetProviders(ctx, req.(*GetProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasinoService_LaunchGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasinoServiceServer).LaunchGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasinoService_LaunchGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasinoServiceServer).LaunchGame(ctx, req.(*LaunchGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasinoService_GetPlayerHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasinoServiceServer).GetPlayerHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasinoService_GetPlayerHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasinoServiceServer).GetPlayerHistory(ctx, req.(*GetPlayerHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasinoService_ProcessBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessBetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasinoServiceServer).ProcessBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasinoService_ProcessBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasinoServiceServer).ProcessBet(ctx, req.(*ProcessBetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasinoService_ProcessWin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessWinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasinoServiceServer).ProcessWin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasinoService_ProcessWin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasinoServiceServer).ProcessWin(ctx, req.(*ProcessWinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasinoService_ProcessRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasinoServiceServer).ProcessRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasinoService_ProcessRollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasinoServiceServer).ProcessRollback(ctx, req.(*ProcessRollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CasinoService_ServiceDesc is the grpc.ServiceDesc for CasinoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CasinoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "casino.CasinoService",
	HandlerType: (*CasinoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGames",
			Handler:    _CasinoService_ListGames_Handler,
		},
		{
			MethodName: "GetGame",
			Handler:    _CasinoService_GetGame_Handler,
		},
		{
			MethodName: "GetCategories",
			Handler:    _CasinoService_GetCategories_Handler,
		},
		{
			MethodName: "GetProviders",
			Handler:    _CasinoService_GetProviders_Handler,
		},
		{
			MethodName: "LaunchGame",
			Handler:    _CasinoService_LaunchGame_Handler,
		},
		{
			MethodName: "GetPlayerHistory",
			Handler:    _CasinoService_GetPlayerHistory_Handler,
		},
		{
			MethodName: "ProcessBet",
			Handler:    _CasinoService_ProcessBet_Handler,
		},
		{
			MethodName: "ProcessWin",
			Handler:    _CasinoService_ProcessWin_Handler,
		},
		{
			MethodName: "ProcessRollback",
			Handler:    _CasinoService_ProcessRollback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "casino_service.proto",
}
