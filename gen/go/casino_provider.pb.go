// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.31.1
// source: casino_provider.proto

package bethela_rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Game represents a casino game
type Game struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	GameId              string                 `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                                                                                             // Provider's unique game ID
	GameUuid            string                 `protobuf:"bytes,2,opt,name=game_uuid,json=gameUuid,proto3" json:"game_uuid,omitempty"`                                                                                       // System unique game ID
	Name                string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                                                                               // Game name
	Description         string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                                                                                                 // Game description
	ThumbnailUrl        string                 `protobuf:"bytes,5,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`                                                                           // URL to game thumbnail
	Category            string                 `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`                                                                                                       // Game category (slots, table, live, etc.)
	MinimumStake        map[string]string      `protobuf:"bytes,7,rep,name=minimum_stake,json=minimumStake,proto3" json:"minimum_stake,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Minimum stake by currency
	MaximumStake        map[string]string      `protobuf:"bytes,8,rep,name=maximum_stake,json=maximumStake,proto3" json:"maximum_stake,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Maximum stake by currency
	MaximumWin          map[string]string      `protobuf:"bytes,9,rep,name=maximum_win,json=maximumWin,proto3" json:"maximum_win,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`       // Maximum win by currency
	SupportedCurrencies []string               `protobuf:"bytes,10,rep,name=supported_currencies,json=supportedCurrencies,proto3" json:"supported_currencies,omitempty"`                                                     // List of supported currencies
	IsActive            bool                   `protobuf:"varint,11,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`                                                                                     // Whether the game is active
	UpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                                                                   // Last update time
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Game) Reset() {
	*x = Game{}
	mi := &file_casino_provider_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Game) ProtoMessage() {}

func (x *Game) ProtoReflect() protoreflect.Message {
	mi := &file_casino_provider_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Game.ProtoReflect.Descriptor instead.
func (*Game) Descriptor() ([]byte, []int) {
	return file_casino_provider_proto_rawDescGZIP(), []int{0}
}

func (x *Game) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *Game) GetGameUuid() string {
	if x != nil {
		return x.GameUuid
	}
	return ""
}

func (x *Game) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Game) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Game) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

func (x *Game) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Game) GetMinimumStake() map[string]string {
	if x != nil {
		return x.MinimumStake
	}
	return nil
}

func (x *Game) GetMaximumStake() map[string]string {
	if x != nil {
		return x.MaximumStake
	}
	return nil
}

func (x *Game) GetMaximumWin() map[string]string {
	if x != nil {
		return x.MaximumWin
	}
	return nil
}

func (x *Game) GetSupportedCurrencies() []string {
	if x != nil {
		return x.SupportedCurrencies
	}
	return nil
}

func (x *Game) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Game) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// GetGamesRequest is used to retrieve games from a provider
type GetGamesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                               // Pagination: page number
	PerPage       int32                  `protobuf:"varint,2,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`          // Pagination: items per page
	Category      string                 `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`                        // Filter by category
	Currency      string                 `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`                        // Filter by supported currency
	ActiveOnly    bool                   `protobuf:"varint,5,opt,name=active_only,json=activeOnly,proto3" json:"active_only,omitempty"` // Filter active games only
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGamesRequest) Reset() {
	*x = GetGamesRequest{}
	mi := &file_casino_provider_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGamesRequest) ProtoMessage() {}

func (x *GetGamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_casino_provider_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGamesRequest.ProtoReflect.Descriptor instead.
func (*GetGamesRequest) Descriptor() ([]byte, []int) {
	return file_casino_provider_proto_rawDescGZIP(), []int{1}
}

func (x *GetGamesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetGamesRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *GetGamesRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *GetGamesRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *GetGamesRequest) GetActiveOnly() bool {
	if x != nil {
		return x.ActiveOnly
	}
	return false
}

// GetGamesResponse contains the list of games
type GetGamesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Games         []*Game                `protobuf:"bytes,1,rep,name=games,proto3" json:"games,omitempty"`                     // List of games
	Total         int32                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                    // Total number of games
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`                      // Current page
	PerPage       int32                  `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"` // Items per page
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGamesResponse) Reset() {
	*x = GetGamesResponse{}
	mi := &file_casino_provider_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGamesResponse) ProtoMessage() {}

func (x *GetGamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_casino_provider_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGamesResponse.ProtoReflect.Descriptor instead.
func (*GetGamesResponse) Descriptor() ([]byte, []int) {
	return file_casino_provider_proto_rawDescGZIP(), []int{2}
}

func (x *GetGamesResponse) GetGames() []*Game {
	if x != nil {
		return x.Games
	}
	return nil
}

func (x *GetGamesResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetGamesResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetGamesResponse) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

// LaunchGameRequest is used to launch a game session
type LaunchGameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        string                 `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                   // Game ID to launch
	PlayerId      string                 `protobuf:"bytes,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`             // Player unique ID
	PlayerName    string                 `protobuf:"bytes,3,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`       // Player display name
	SessionToken  string                 `protobuf:"bytes,4,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"` // Authentication token
	Currency      string                 `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`                             // Player's currency
	Balance       *Money                 `protobuf:"bytes,6,opt,name=balance,proto3" json:"balance,omitempty"`                               // Player's current balance
	DemoMode      bool                   `protobuf:"varint,7,opt,name=demo_mode,json=demoMode,proto3" json:"demo_mode,omitempty"`            // Whether to launch in demo mode
	ReturnUrl     string                 `protobuf:"bytes,8,opt,name=return_url,json=returnUrl,proto3" json:"return_url,omitempty"`          // URL to return to after game ends
	Language      string                 `protobuf:"bytes,9,opt,name=language,proto3" json:"language,omitempty"`                             // Player's preferred language
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LaunchGameRequest) Reset() {
	*x = LaunchGameRequest{}
	mi := &file_casino_provider_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LaunchGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchGameRequest) ProtoMessage() {}

func (x *LaunchGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_casino_provider_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchGameRequest.ProtoReflect.Descriptor instead.
func (*LaunchGameRequest) Descriptor() ([]byte, []int) {
	return file_casino_provider_proto_rawDescGZIP(), []int{3}
}

func (x *LaunchGameRequest) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *LaunchGameRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *LaunchGameRequest) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *LaunchGameRequest) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *LaunchGameRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *LaunchGameRequest) GetBalance() *Money {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *LaunchGameRequest) GetDemoMode() bool {
	if x != nil {
		return x.DemoMode
	}
	return false
}

func (x *LaunchGameRequest) GetReturnUrl() string {
	if x != nil {
		return x.ReturnUrl
	}
	return ""
}

func (x *LaunchGameRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

// LaunchGameResponse contains the game launch URL
type LaunchGameResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameUrl       string                 `protobuf:"bytes,1,opt,name=game_url,json=gameUrl,proto3" json:"game_url,omitempty"`       // URL to launch the game
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` // Provider's session ID
	ExpiresAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"` // Session expiration time
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LaunchGameResponse) Reset() {
	*x = LaunchGameResponse{}
	mi := &file_casino_provider_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LaunchGameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchGameResponse) ProtoMessage() {}

func (x *LaunchGameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_casino_provider_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchGameResponse.ProtoReflect.Descriptor instead.
func (*LaunchGameResponse) Descriptor() ([]byte, []int) {
	return file_casino_provider_proto_rawDescGZIP(), []int{4}
}

func (x *LaunchGameResponse) GetGameUrl() string {
	if x != nil {
		return x.GameUrl
	}
	return ""
}

func (x *LaunchGameResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *LaunchGameResponse) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

// BetRequest is used to process a bet
type BetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId string                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`                                            // Unique transaction ID
	GameId        string                 `protobuf:"bytes,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                                                                 // Game ID
	PlayerId      string                 `protobuf:"bytes,3,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`                                                           // Player ID
	SessionId     string                 `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                                                        // Session ID
	RoundId       string                 `protobuf:"bytes,5,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`                                                              // Game round ID
	Amount        *Money                 `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`                                                                               // Bet amount
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                                         // Transaction timestamp
	Metadata      map[string]string      `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Additional metadata
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BetRequest) Reset() {
	*x = BetRequest{}
	mi := &file_casino_provider_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetRequest) ProtoMessage() {}

func (x *BetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_casino_provider_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetRequest.ProtoReflect.Descriptor instead.
func (*BetRequest) Descriptor() ([]byte, []int) {
	return file_casino_provider_proto_rawDescGZIP(), []int{5}
}

func (x *BetRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *BetRequest) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *BetRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *BetRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *BetRequest) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *BetRequest) GetAmount() *Money {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *BetRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *BetRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// BetResponse is returned after processing a bet
type BetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId string                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` // Unique transaction ID
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`                                 // Whether the bet was successful
	ErrorCode     string                 `protobuf:"bytes,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`             // Error code if unsuccessful
	ErrorMessage  string                 `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`    // Error message if unsuccessful
	Balance       *Money                 `protobuf:"bytes,5,opt,name=balance,proto3" json:"balance,omitempty"`                                  // Updated balance
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BetResponse) Reset() {
	*x = BetResponse{}
	mi := &file_casino_provider_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetResponse) ProtoMessage() {}

func (x *BetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_casino_provider_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetResponse.ProtoReflect.Descriptor instead.
func (*BetResponse) Descriptor() ([]byte, []int) {
	return file_casino_provider_proto_rawDescGZIP(), []int{6}
}

func (x *BetResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *BetResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BetResponse) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *BetResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *BetResponse) GetBalance() *Money {
	if x != nil {
		return x.Balance
	}
	return nil
}

// WinRequest is used to process a win
type WinRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TransactionId    string                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`                                            // Unique transaction ID
	GameId           string                 `protobuf:"bytes,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                                                                 // Game ID
	PlayerId         string                 `protobuf:"bytes,3,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`                                                           // Player ID
	SessionId        string                 `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                                                        // Session ID
	RoundId          string                 `protobuf:"bytes,5,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`                                                              // Game round ID
	BetTransactionId string                 `protobuf:"bytes,6,opt,name=bet_transaction_id,json=betTransactionId,proto3" json:"bet_transaction_id,omitempty"`                                 // Original bet transaction ID
	Amount           *Money                 `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`                                                                               // Win amount
	Timestamp        *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                                         // Transaction timestamp
	Metadata         map[string]string      `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Additional metadata
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *WinRequest) Reset() {
	*x = WinRequest{}
	mi := &file_casino_provider_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinRequest) ProtoMessage() {}

func (x *WinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_casino_provider_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinRequest.ProtoReflect.Descriptor instead.
func (*WinRequest) Descriptor() ([]byte, []int) {
	return file_casino_provider_proto_rawDescGZIP(), []int{7}
}

func (x *WinRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *WinRequest) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *WinRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *WinRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *WinRequest) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *WinRequest) GetBetTransactionId() string {
	if x != nil {
		return x.BetTransactionId
	}
	return ""
}

func (x *WinRequest) GetAmount() *Money {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *WinRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *WinRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// WinResponse is returned after processing a win
type WinResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId string                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` // Unique transaction ID
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`                                 // Whether the win was successful
	ErrorCode     string                 `protobuf:"bytes,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`             // Error code if unsuccessful
	ErrorMessage  string                 `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`    // Error message if unsuccessful
	Balance       *Money                 `protobuf:"bytes,5,opt,name=balance,proto3" json:"balance,omitempty"`                                  // Updated balance
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WinResponse) Reset() {
	*x = WinResponse{}
	mi := &file_casino_provider_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinResponse) ProtoMessage() {}

func (x *WinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_casino_provider_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinResponse.ProtoReflect.Descriptor instead.
func (*WinResponse) Descriptor() ([]byte, []int) {
	return file_casino_provider_proto_rawDescGZIP(), []int{8}
}

func (x *WinResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *WinResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *WinResponse) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *WinResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *WinResponse) GetBalance() *Money {
	if x != nil {
		return x.Balance
	}
	return nil
}

// RollbackRequest is used to rollback a transaction
type RollbackRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId string                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` // Transaction ID to rollback
	PlayerId      string                 `protobuf:"bytes,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`                // Player ID
	GameId        string                 `protobuf:"bytes,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                      // Game ID
	SessionId     string                 `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`             // Session ID
	RoundId       string                 `protobuf:"bytes,5,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`                   // Game round ID
	Reason        string                 `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`                                    // Reason for rollback
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                              // Rollback timestamp
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RollbackRequest) Reset() {
	*x = RollbackRequest{}
	mi := &file_casino_provider_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackRequest) ProtoMessage() {}

func (x *RollbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_casino_provider_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackRequest.ProtoReflect.Descriptor instead.
func (*RollbackRequest) Descriptor() ([]byte, []int) {
	return file_casino_provider_proto_rawDescGZIP(), []int{9}
}

func (x *RollbackRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *RollbackRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *RollbackRequest) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *RollbackRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *RollbackRequest) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *RollbackRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *RollbackRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// RollbackResponse is returned after processing a rollback
type RollbackResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId string                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` // Original transaction ID
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`                                 // Whether the rollback was successful
	ErrorCode     string                 `protobuf:"bytes,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`             // Error code if unsuccessful
	ErrorMessage  string                 `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`    // Error message if unsuccessful
	Balance       *Money                 `protobuf:"bytes,5,opt,name=balance,proto3" json:"balance,omitempty"`                                  // Updated balance
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RollbackResponse) Reset() {
	*x = RollbackResponse{}
	mi := &file_casino_provider_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackResponse) ProtoMessage() {}

func (x *RollbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_casino_provider_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackResponse.ProtoReflect.Descriptor instead.
func (*RollbackResponse) Descriptor() ([]byte, []int) {
	return file_casino_provider_proto_rawDescGZIP(), []int{10}
}

func (x *RollbackResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *RollbackResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RollbackResponse) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *RollbackResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *RollbackResponse) GetBalance() *Money {
	if x != nil {
		return x.Balance
	}
	return nil
}

var File_casino_provider_proto protoreflect.FileDescriptor

const file_casino_provider_proto_rawDesc = "" +
	"\n" +
	"\x15casino_provider.proto\x12\x06casino\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\fwallet.proto\"\xc8\x05\n" +
	"\x04Game\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\tR\x06gameId\x12\x1b\n" +
	"\tgame_uuid\x18\x02 \x01(\tR\bgameUuid\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12#\n" +
	"\rthumbnail_url\x18\x05 \x01(\tR\fthumbnailUrl\x12\x1a\n" +
	"\bcategory\x18\x06 \x01(\tR\bcategory\x12C\n" +
	"\rminimum_stake\x18\a \x03(\v2\x1e.casino.Game.MinimumStakeEntryR\fminimumStake\x12C\n" +
	"\rmaximum_stake\x18\b \x03(\v2\x1e.casino.Game.MaximumStakeEntryR\fmaximumStake\x12=\n" +
	"\vmaximum_win\x18\t \x03(\v2\x1c.casino.Game.MaximumWinEntryR\n" +
	"maximumWin\x121\n" +
	"\x14supported_currencies\x18\n" +
	" \x03(\tR\x13supportedCurrencies\x12\x1b\n" +
	"\tis_active\x18\v \x01(\bR\bisActive\x129\n" +
	"\n" +
	"updated_at\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x1a?\n" +
	"\x11MinimumStakeEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a?\n" +
	"\x11MaximumStakeEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a=\n" +
	"\x0fMaximumWinEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x99\x01\n" +
	"\x0fGetGamesRequest\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x19\n" +
	"\bper_page\x18\x02 \x01(\x05R\aperPage\x12\x1a\n" +
	"\bcategory\x18\x03 \x01(\tR\bcategory\x12\x1a\n" +
	"\bcurrency\x18\x04 \x01(\tR\bcurrency\x12\x1f\n" +
	"\vactive_only\x18\x05 \x01(\bR\n" +
	"activeOnly\"{\n" +
	"\x10GetGamesResponse\x12\"\n" +
	"\x05games\x18\x01 \x03(\v2\f.casino.GameR\x05games\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x05R\x05total\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x19\n" +
	"\bper_page\x18\x04 \x01(\x05R\aperPage\"\xac\x02\n" +
	"\x11LaunchGameRequest\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\tR\x06gameId\x12\x1b\n" +
	"\tplayer_id\x18\x02 \x01(\tR\bplayerId\x12\x1f\n" +
	"\vplayer_name\x18\x03 \x01(\tR\n" +
	"playerName\x12#\n" +
	"\rsession_token\x18\x04 \x01(\tR\fsessionToken\x12\x1a\n" +
	"\bcurrency\x18\x05 \x01(\tR\bcurrency\x12'\n" +
	"\abalance\x18\x06 \x01(\v2\r.wallet.MoneyR\abalance\x12\x1b\n" +
	"\tdemo_mode\x18\a \x01(\bR\bdemoMode\x12\x1d\n" +
	"\n" +
	"return_url\x18\b \x01(\tR\treturnUrl\x12\x1a\n" +
	"\blanguage\x18\t \x01(\tR\blanguage\"\x89\x01\n" +
	"\x12LaunchGameResponse\x12\x19\n" +
	"\bgame_url\x18\x01 \x01(\tR\agameUrl\x12\x1d\n" +
	"\n" +
	"session_id\x18\x02 \x01(\tR\tsessionId\x129\n" +
	"\n" +
	"expires_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\texpiresAt\"\xff\x02\n" +
	"\n" +
	"BetRequest\x12%\n" +
	"\x0etransaction_id\x18\x01 \x01(\tR\rtransactionId\x12\x17\n" +
	"\agame_id\x18\x02 \x01(\tR\x06gameId\x12\x1b\n" +
	"\tplayer_id\x18\x03 \x01(\tR\bplayerId\x12\x1d\n" +
	"\n" +
	"session_id\x18\x04 \x01(\tR\tsessionId\x12\x19\n" +
	"\bround_id\x18\x05 \x01(\tR\aroundId\x12%\n" +
	"\x06amount\x18\x06 \x01(\v2\r.wallet.MoneyR\x06amount\x128\n" +
	"\ttimestamp\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12<\n" +
	"\bmetadata\x18\b \x03(\v2 .casino.BetRequest.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xbb\x01\n" +
	"\vBetResponse\x12%\n" +
	"\x0etransaction_id\x18\x01 \x01(\tR\rtransactionId\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x1d\n" +
	"\n" +
	"error_code\x18\x03 \x01(\tR\terrorCode\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessage\x12'\n" +
	"\abalance\x18\x05 \x01(\v2\r.wallet.MoneyR\abalance\"\xad\x03\n" +
	"\n" +
	"WinRequest\x12%\n" +
	"\x0etransaction_id\x18\x01 \x01(\tR\rtransactionId\x12\x17\n" +
	"\agame_id\x18\x02 \x01(\tR\x06gameId\x12\x1b\n" +
	"\tplayer_id\x18\x03 \x01(\tR\bplayerId\x12\x1d\n" +
	"\n" +
	"session_id\x18\x04 \x01(\tR\tsessionId\x12\x19\n" +
	"\bround_id\x18\x05 \x01(\tR\aroundId\x12,\n" +
	"\x12bet_transaction_id\x18\x06 \x01(\tR\x10betTransactionId\x12%\n" +
	"\x06amount\x18\a \x01(\v2\r.wallet.MoneyR\x06amount\x128\n" +
	"\ttimestamp\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12<\n" +
	"\bmetadata\x18\t \x03(\v2 .casino.WinRequest.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xbb\x01\n" +
	"\vWinResponse\x12%\n" +
	"\x0etransaction_id\x18\x01 \x01(\tR\rtransactionId\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x1d\n" +
	"\n" +
	"error_code\x18\x03 \x01(\tR\terrorCode\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessage\x12'\n" +
	"\abalance\x18\x05 \x01(\v2\r.wallet.MoneyR\abalance\"\xfa\x01\n" +
	"\x0fRollbackRequest\x12%\n" +
	"\x0etransaction_id\x18\x01 \x01(\tR\rtransactionId\x12\x1b\n" +
	"\tplayer_id\x18\x02 \x01(\tR\bplayerId\x12\x17\n" +
	"\agame_id\x18\x03 \x01(\tR\x06gameId\x12\x1d\n" +
	"\n" +
	"session_id\x18\x04 \x01(\tR\tsessionId\x12\x19\n" +
	"\bround_id\x18\x05 \x01(\tR\aroundId\x12\x16\n" +
	"\x06reason\x18\x06 \x01(\tR\x06reason\x128\n" +
	"\ttimestamp\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\"\xc0\x01\n" +
	"\x10RollbackResponse\x12%\n" +
	"\x0etransaction_id\x18\x01 \x01(\tR\rtransactionId\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x1d\n" +
	"\n" +
	"error_code\x18\x03 \x01(\tR\terrorCode\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessage\x12'\n" +
	"\abalance\x18\x05 \x01(\v2\r.wallet.MoneyR\abalance2\xd5\x02\n" +
	"\x17CasinoProviderInterface\x12=\n" +
	"\bGetGames\x12\x17.casino.GetGamesRequest\x1a\x18.casino.GetGamesResponse\x12C\n" +
	"\n" +
	"LaunchGame\x12\x19.casino.LaunchGameRequest\x1a\x1a.casino.LaunchGameResponse\x125\n" +
	"\n" +
	"ProcessBet\x12\x12.casino.BetRequest\x1a\x13.casino.BetResponse\x125\n" +
	"\n" +
	"ProcessWin\x12\x12.casino.WinRequest\x1a\x13.casino.WinResponse\x12H\n" +
	"\x13RollbackTransaction\x12\x17.casino.RollbackRequest\x1a\x18.casino.RollbackResponseB3Z1github.com/Silicon-Savannah-Solutions/bethela-rpcb\x06proto3"

var (
	file_casino_provider_proto_rawDescOnce sync.Once
	file_casino_provider_proto_rawDescData []byte
)

func file_casino_provider_proto_rawDescGZIP() []byte {
	file_casino_provider_proto_rawDescOnce.Do(func() {
		file_casino_provider_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_casino_provider_proto_rawDesc), len(file_casino_provider_proto_rawDesc)))
	})
	return file_casino_provider_proto_rawDescData
}

var file_casino_provider_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_casino_provider_proto_goTypes = []any{
	(*Game)(nil),                  // 0: casino.Game
	(*GetGamesRequest)(nil),       // 1: casino.GetGamesRequest
	(*GetGamesResponse)(nil),      // 2: casino.GetGamesResponse
	(*LaunchGameRequest)(nil),     // 3: casino.LaunchGameRequest
	(*LaunchGameResponse)(nil),    // 4: casino.LaunchGameResponse
	(*BetRequest)(nil),            // 5: casino.BetRequest
	(*BetResponse)(nil),           // 6: casino.BetResponse
	(*WinRequest)(nil),            // 7: casino.WinRequest
	(*WinResponse)(nil),           // 8: casino.WinResponse
	(*RollbackRequest)(nil),       // 9: casino.RollbackRequest
	(*RollbackResponse)(nil),      // 10: casino.RollbackResponse
	nil,                           // 11: casino.Game.MinimumStakeEntry
	nil,                           // 12: casino.Game.MaximumStakeEntry
	nil,                           // 13: casino.Game.MaximumWinEntry
	nil,                           // 14: casino.BetRequest.MetadataEntry
	nil,                           // 15: casino.WinRequest.MetadataEntry
	(*timestamppb.Timestamp)(nil), // 16: google.protobuf.Timestamp
	(*Money)(nil),                 // 17: wallet.Money
}
var file_casino_provider_proto_depIdxs = []int32{
	11, // 0: casino.Game.minimum_stake:type_name -> casino.Game.MinimumStakeEntry
	12, // 1: casino.Game.maximum_stake:type_name -> casino.Game.MaximumStakeEntry
	13, // 2: casino.Game.maximum_win:type_name -> casino.Game.MaximumWinEntry
	16, // 3: casino.Game.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 4: casino.GetGamesResponse.games:type_name -> casino.Game
	17, // 5: casino.LaunchGameRequest.balance:type_name -> wallet.Money
	16, // 6: casino.LaunchGameResponse.expires_at:type_name -> google.protobuf.Timestamp
	17, // 7: casino.BetRequest.amount:type_name -> wallet.Money
	16, // 8: casino.BetRequest.timestamp:type_name -> google.protobuf.Timestamp
	14, // 9: casino.BetRequest.metadata:type_name -> casino.BetRequest.MetadataEntry
	17, // 10: casino.BetResponse.balance:type_name -> wallet.Money
	17, // 11: casino.WinRequest.amount:type_name -> wallet.Money
	16, // 12: casino.WinRequest.timestamp:type_name -> google.protobuf.Timestamp
	15, // 13: casino.WinRequest.metadata:type_name -> casino.WinRequest.MetadataEntry
	17, // 14: casino.WinResponse.balance:type_name -> wallet.Money
	16, // 15: casino.RollbackRequest.timestamp:type_name -> google.protobuf.Timestamp
	17, // 16: casino.RollbackResponse.balance:type_name -> wallet.Money
	1,  // 17: casino.CasinoProviderInterface.GetGames:input_type -> casino.GetGamesRequest
	3,  // 18: casino.CasinoProviderInterface.LaunchGame:input_type -> casino.LaunchGameRequest
	5,  // 19: casino.CasinoProviderInterface.ProcessBet:input_type -> casino.BetRequest
	7,  // 20: casino.CasinoProviderInterface.ProcessWin:input_type -> casino.WinRequest
	9,  // 21: casino.CasinoProviderInterface.RollbackTransaction:input_type -> casino.RollbackRequest
	2,  // 22: casino.CasinoProviderInterface.GetGames:output_type -> casino.GetGamesResponse
	4,  // 23: casino.CasinoProviderInterface.LaunchGame:output_type -> casino.LaunchGameResponse
	6,  // 24: casino.CasinoProviderInterface.ProcessBet:output_type -> casino.BetResponse
	8,  // 25: casino.CasinoProviderInterface.ProcessWin:output_type -> casino.WinResponse
	10, // 26: casino.CasinoProviderInterface.RollbackTransaction:output_type -> casino.RollbackResponse
	22, // [22:27] is the sub-list for method output_type
	17, // [17:22] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_casino_provider_proto_init() }
func file_casino_provider_proto_init() {
	if File_casino_provider_proto != nil {
		return
	}
	file_wallet_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_casino_provider_proto_rawDesc), len(file_casino_provider_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_casino_provider_proto_goTypes,
		DependencyIndexes: file_casino_provider_proto_depIdxs,
		MessageInfos:      file_casino_provider_proto_msgTypes,
	}.Build()
	File_casino_provider_proto = out.File
	file_casino_provider_proto_goTypes = nil
	file_casino_provider_proto_depIdxs = nil
}
