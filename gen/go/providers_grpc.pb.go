// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: providers.proto

package bethela_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MPesaService_STKPush_FullMethodName          = "/providers.MPesaService/STKPush"
	MPesaService_B2C_FullMethodName              = "/providers.MPesaService/B2C"
	MPesaService_C2B_FullMethodName              = "/providers.MPesaService/C2B"
	MPesaService_QueryTransaction_FullMethodName = "/providers.MPesaService/QueryTransaction"
	MPesaService_Reversal_FullMethodName         = "/providers.MPesaService/Reversal"
	MPesaService_AccountBalance_FullMethodName   = "/providers.MPesaService/AccountBalance"
)

// MPesaServiceClient is the client API for MPesaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MPesaService offers APIs specifically for M-Pesa mobile money
type MPesaServiceClient interface {
	// Initiates an STK push to customer phone
	STKPush(ctx context.Context, in *STKPushRequest, opts ...grpc.CallOption) (*STKPushResponse, error)
	// Business to Customer payment
	B2C(ctx context.Context, in *B2CRequest, opts ...grpc.CallOption) (*B2CResponse, error)
	// Customer to Business payment
	C2B(ctx context.Context, in *C2BRequest, opts ...grpc.CallOption) (*C2BResponse, error)
	// Query status of a transaction
	QueryTransaction(ctx context.Context, in *QueryTransactionRequest, opts ...grpc.CallOption) (*QueryTransactionResponse, error)
	// Reversal of a transaction
	Reversal(ctx context.Context, in *ReversalRequest, opts ...grpc.CallOption) (*ReversalResponse, error)
	// Get account balance
	AccountBalance(ctx context.Context, in *AccountBalanceRequest, opts ...grpc.CallOption) (*AccountBalanceResponse, error)
}

type mPesaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMPesaServiceClient(cc grpc.ClientConnInterface) MPesaServiceClient {
	return &mPesaServiceClient{cc}
}

func (c *mPesaServiceClient) STKPush(ctx context.Context, in *STKPushRequest, opts ...grpc.CallOption) (*STKPushResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(STKPushResponse)
	err := c.cc.Invoke(ctx, MPesaService_STKPush_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPesaServiceClient) B2C(ctx context.Context, in *B2CRequest, opts ...grpc.CallOption) (*B2CResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(B2CResponse)
	err := c.cc.Invoke(ctx, MPesaService_B2C_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPesaServiceClient) C2B(ctx context.Context, in *C2BRequest, opts ...grpc.CallOption) (*C2BResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(C2BResponse)
	err := c.cc.Invoke(ctx, MPesaService_C2B_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPesaServiceClient) QueryTransaction(ctx context.Context, in *QueryTransactionRequest, opts ...grpc.CallOption) (*QueryTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryTransactionResponse)
	err := c.cc.Invoke(ctx, MPesaService_QueryTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPesaServiceClient) Reversal(ctx context.Context, in *ReversalRequest, opts ...grpc.CallOption) (*ReversalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReversalResponse)
	err := c.cc.Invoke(ctx, MPesaService_Reversal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPesaServiceClient) AccountBalance(ctx context.Context, in *AccountBalanceRequest, opts ...grpc.CallOption) (*AccountBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountBalanceResponse)
	err := c.cc.Invoke(ctx, MPesaService_AccountBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MPesaServiceServer is the server API for MPesaService service.
// All implementations must embed UnimplementedMPesaServiceServer
// for forward compatibility.
//
// MPesaService offers APIs specifically for M-Pesa mobile money
type MPesaServiceServer interface {
	// Initiates an STK push to customer phone
	STKPush(context.Context, *STKPushRequest) (*STKPushResponse, error)
	// Business to Customer payment
	B2C(context.Context, *B2CRequest) (*B2CResponse, error)
	// Customer to Business payment
	C2B(context.Context, *C2BRequest) (*C2BResponse, error)
	// Query status of a transaction
	QueryTransaction(context.Context, *QueryTransactionRequest) (*QueryTransactionResponse, error)
	// Reversal of a transaction
	Reversal(context.Context, *ReversalRequest) (*ReversalResponse, error)
	// Get account balance
	AccountBalance(context.Context, *AccountBalanceRequest) (*AccountBalanceResponse, error)
	mustEmbedUnimplementedMPesaServiceServer()
}

// UnimplementedMPesaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMPesaServiceServer struct{}

func (UnimplementedMPesaServiceServer) STKPush(context.Context, *STKPushRequest) (*STKPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method STKPush not implemented")
}
func (UnimplementedMPesaServiceServer) B2C(context.Context, *B2CRequest) (*B2CResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method B2C not implemented")
}
func (UnimplementedMPesaServiceServer) C2B(context.Context, *C2BRequest) (*C2BResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method C2B not implemented")
}
func (UnimplementedMPesaServiceServer) QueryTransaction(context.Context, *QueryTransactionRequest) (*QueryTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTransaction not implemented")
}
func (UnimplementedMPesaServiceServer) Reversal(context.Context, *ReversalRequest) (*ReversalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reversal not implemented")
}
func (UnimplementedMPesaServiceServer) AccountBalance(context.Context, *AccountBalanceRequest) (*AccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountBalance not implemented")
}
func (UnimplementedMPesaServiceServer) mustEmbedUnimplementedMPesaServiceServer() {}
func (UnimplementedMPesaServiceServer) testEmbeddedByValue()                      {}

// UnsafeMPesaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MPesaServiceServer will
// result in compilation errors.
type UnsafeMPesaServiceServer interface {
	mustEmbedUnimplementedMPesaServiceServer()
}

func RegisterMPesaServiceServer(s grpc.ServiceRegistrar, srv MPesaServiceServer) {
	// If the following call pancis, it indicates UnimplementedMPesaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MPesaService_ServiceDesc, srv)
}

func _MPesaService_STKPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(STKPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPesaServiceServer).STKPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPesaService_STKPush_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPesaServiceServer).STKPush(ctx, req.(*STKPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPesaService_B2C_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(B2CRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPesaServiceServer).B2C(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPesaService_B2C_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPesaServiceServer).B2C(ctx, req.(*B2CRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPesaService_C2B_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2BRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPesaServiceServer).C2B(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPesaService_C2B_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPesaServiceServer).C2B(ctx, req.(*C2BRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPesaService_QueryTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPesaServiceServer).QueryTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPesaService_QueryTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPesaServiceServer).QueryTransaction(ctx, req.(*QueryTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPesaService_Reversal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReversalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPesaServiceServer).Reversal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPesaService_Reversal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPesaServiceServer).Reversal(ctx, req.(*ReversalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPesaService_AccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPesaServiceServer).AccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPesaService_AccountBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPesaServiceServer).AccountBalance(ctx, req.(*AccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MPesaService_ServiceDesc is the grpc.ServiceDesc for MPesaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MPesaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "providers.MPesaService",
	HandlerType: (*MPesaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "STKPush",
			Handler:    _MPesaService_STKPush_Handler,
		},
		{
			MethodName: "B2C",
			Handler:    _MPesaService_B2C_Handler,
		},
		{
			MethodName: "C2B",
			Handler:    _MPesaService_C2B_Handler,
		},
		{
			MethodName: "QueryTransaction",
			Handler:    _MPesaService_QueryTransaction_Handler,
		},
		{
			MethodName: "Reversal",
			Handler:    _MPesaService_Reversal_Handler,
		},
		{
			MethodName: "AccountBalance",
			Handler:    _MPesaService_AccountBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "providers.proto",
}
