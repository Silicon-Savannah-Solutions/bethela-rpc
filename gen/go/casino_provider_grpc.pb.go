// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: casino_provider.proto

package bethela_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CasinoProviderInterface_GetGames_FullMethodName            = "/casino.CasinoProviderInterface/GetGames"
	CasinoProviderInterface_LaunchGame_FullMethodName          = "/casino.CasinoProviderInterface/LaunchGame"
	CasinoProviderInterface_ProcessBet_FullMethodName          = "/casino.CasinoProviderInterface/ProcessBet"
	CasinoProviderInterface_ProcessWin_FullMethodName          = "/casino.CasinoProviderInterface/ProcessWin"
	CasinoProviderInterface_RollbackTransaction_FullMethodName = "/casino.CasinoProviderInterface/RollbackTransaction"
)

// CasinoProviderInterfaceClient is the client API for CasinoProviderInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CasinoProviderInterface - Standard API that each casino game provider MUST implement
// Each provider (Euro Virtuals, etc.) will implement this interface
type CasinoProviderInterfaceClient interface {
	// Get available games from the provider
	GetGames(ctx context.Context, in *GetGamesRequest, opts ...grpc.CallOption) (*GetGamesResponse, error)
	// Launch a game session
	LaunchGame(ctx context.Context, in *LaunchGameRequest, opts ...grpc.CallOption) (*LaunchGameResponse, error)
	// Process a bet transaction
	ProcessBet(ctx context.Context, in *BetRequest, opts ...grpc.CallOption) (*BetResponse, error)
	// Process a win transaction
	ProcessWin(ctx context.Context, in *WinRequest, opts ...grpc.CallOption) (*WinResponse, error)
	// Rollback a transaction
	RollbackTransaction(ctx context.Context, in *RollbackRequest, opts ...grpc.CallOption) (*RollbackResponse, error)
}

type casinoProviderInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewCasinoProviderInterfaceClient(cc grpc.ClientConnInterface) CasinoProviderInterfaceClient {
	return &casinoProviderInterfaceClient{cc}
}

func (c *casinoProviderInterfaceClient) GetGames(ctx context.Context, in *GetGamesRequest, opts ...grpc.CallOption) (*GetGamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGamesResponse)
	err := c.cc.Invoke(ctx, CasinoProviderInterface_GetGames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casinoProviderInterfaceClient) LaunchGame(ctx context.Context, in *LaunchGameRequest, opts ...grpc.CallOption) (*LaunchGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LaunchGameResponse)
	err := c.cc.Invoke(ctx, CasinoProviderInterface_LaunchGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casinoProviderInterfaceClient) ProcessBet(ctx context.Context, in *BetRequest, opts ...grpc.CallOption) (*BetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BetResponse)
	err := c.cc.Invoke(ctx, CasinoProviderInterface_ProcessBet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casinoProviderInterfaceClient) ProcessWin(ctx context.Context, in *WinRequest, opts ...grpc.CallOption) (*WinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WinResponse)
	err := c.cc.Invoke(ctx, CasinoProviderInterface_ProcessWin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casinoProviderInterfaceClient) RollbackTransaction(ctx context.Context, in *RollbackRequest, opts ...grpc.CallOption) (*RollbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollbackResponse)
	err := c.cc.Invoke(ctx, CasinoProviderInterface_RollbackTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CasinoProviderInterfaceServer is the server API for CasinoProviderInterface service.
// All implementations must embed UnimplementedCasinoProviderInterfaceServer
// for forward compatibility.
//
// CasinoProviderInterface - Standard API that each casino game provider MUST implement
// Each provider (Euro Virtuals, etc.) will implement this interface
type CasinoProviderInterfaceServer interface {
	// Get available games from the provider
	GetGames(context.Context, *GetGamesRequest) (*GetGamesResponse, error)
	// Launch a game session
	LaunchGame(context.Context, *LaunchGameRequest) (*LaunchGameResponse, error)
	// Process a bet transaction
	ProcessBet(context.Context, *BetRequest) (*BetResponse, error)
	// Process a win transaction
	ProcessWin(context.Context, *WinRequest) (*WinResponse, error)
	// Rollback a transaction
	RollbackTransaction(context.Context, *RollbackRequest) (*RollbackResponse, error)
	mustEmbedUnimplementedCasinoProviderInterfaceServer()
}

// UnimplementedCasinoProviderInterfaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCasinoProviderInterfaceServer struct{}

func (UnimplementedCasinoProviderInterfaceServer) GetGames(context.Context, *GetGamesRequest) (*GetGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGames not implemented")
}
func (UnimplementedCasinoProviderInterfaceServer) LaunchGame(context.Context, *LaunchGameRequest) (*LaunchGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchGame not implemented")
}
func (UnimplementedCasinoProviderInterfaceServer) ProcessBet(context.Context, *BetRequest) (*BetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessBet not implemented")
}
func (UnimplementedCasinoProviderInterfaceServer) ProcessWin(context.Context, *WinRequest) (*WinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessWin not implemented")
}
func (UnimplementedCasinoProviderInterfaceServer) RollbackTransaction(context.Context, *RollbackRequest) (*RollbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackTransaction not implemented")
}
func (UnimplementedCasinoProviderInterfaceServer) mustEmbedUnimplementedCasinoProviderInterfaceServer() {
}
func (UnimplementedCasinoProviderInterfaceServer) testEmbeddedByValue() {}

// UnsafeCasinoProviderInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CasinoProviderInterfaceServer will
// result in compilation errors.
type UnsafeCasinoProviderInterfaceServer interface {
	mustEmbedUnimplementedCasinoProviderInterfaceServer()
}

func RegisterCasinoProviderInterfaceServer(s grpc.ServiceRegistrar, srv CasinoProviderInterfaceServer) {
	// If the following call pancis, it indicates UnimplementedCasinoProviderInterfaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CasinoProviderInterface_ServiceDesc, srv)
}

func _CasinoProviderInterface_GetGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasinoProviderInterfaceServer).GetGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasinoProviderInterface_GetGames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasinoProviderInterfaceServer).GetGames(ctx, req.(*GetGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasinoProviderInterface_LaunchGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasinoProviderInterfaceServer).LaunchGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasinoProviderInterface_LaunchGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasinoProviderInterfaceServer).LaunchGame(ctx, req.(*LaunchGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasinoProviderInterface_ProcessBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasinoProviderInterfaceServer).ProcessBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasinoProviderInterface_ProcessBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasinoProviderInterfaceServer).ProcessBet(ctx, req.(*BetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasinoProviderInterface_ProcessWin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasinoProviderInterfaceServer).ProcessWin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasinoProviderInterface_ProcessWin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasinoProviderInterfaceServer).ProcessWin(ctx, req.(*WinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasinoProviderInterface_RollbackTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasinoProviderInterfaceServer).RollbackTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CasinoProviderInterface_RollbackTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasinoProviderInterfaceServer).RollbackTransaction(ctx, req.(*RollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CasinoProviderInterface_ServiceDesc is the grpc.ServiceDesc for CasinoProviderInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CasinoProviderInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "casino.CasinoProviderInterface",
	HandlerType: (*CasinoProviderInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGames",
			Handler:    _CasinoProviderInterface_GetGames_Handler,
		},
		{
			MethodName: "LaunchGame",
			Handler:    _CasinoProviderInterface_LaunchGame_Handler,
		},
		{
			MethodName: "ProcessBet",
			Handler:    _CasinoProviderInterface_ProcessBet_Handler,
		},
		{
			MethodName: "ProcessWin",
			Handler:    _CasinoProviderInterface_ProcessWin_Handler,
		},
		{
			MethodName: "RollbackTransaction",
			Handler:    _CasinoProviderInterface_RollbackTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "casino_provider.proto",
}
