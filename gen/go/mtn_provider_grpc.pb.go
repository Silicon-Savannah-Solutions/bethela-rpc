// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: mtn_provider.proto

package bethela_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MTNService_RequestToPay_FullMethodName          = "/providers.MTNService/RequestToPay"
	MTNService_Transfer_FullMethodName              = "/providers.MTNService/Transfer"
	MTNService_GetRequestToPayStatus_FullMethodName = "/providers.MTNService/GetRequestToPayStatus"
	MTNService_GetTransferStatus_FullMethodName     = "/providers.MTNService/GetTransferStatus"
	MTNService_GetAccountBalance_FullMethodName     = "/providers.MTNService/GetAccountBalance"
	MTNService_ValidateAccountHolder_FullMethodName = "/providers.MTNService/ValidateAccountHolder"
)

// MTNServiceClient is the client API for MTNService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MTNService offers APIs specifically for MTN Mobile Money
type MTNServiceClient interface {
	// Request a payment from a customer (Collection)
	RequestToPay(ctx context.Context, in *RequestToPayRequest, opts ...grpc.CallOption) (*RequestToPayResponse, error)
	// Transfer to a customer (Disbursement)
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	// Get the status of a request to pay transaction
	GetRequestToPayStatus(ctx context.Context, in *GetRequestToPayStatusRequest, opts ...grpc.CallOption) (*GetRequestToPayStatusResponse, error)
	// Get the status of a transfer transaction
	GetTransferStatus(ctx context.Context, in *GetTransferStatusRequest, opts ...grpc.CallOption) (*GetTransferStatusResponse, error)
	// Get account balance
	GetAccountBalance(ctx context.Context, in *GetAccountBalanceRequest, opts ...grpc.CallOption) (*GetAccountBalanceResponse, error)
	// Validate account holder
	ValidateAccountHolder(ctx context.Context, in *ValidateAccountHolderRequest, opts ...grpc.CallOption) (*ValidateAccountHolderResponse, error)
}

type mTNServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMTNServiceClient(cc grpc.ClientConnInterface) MTNServiceClient {
	return &mTNServiceClient{cc}
}

func (c *mTNServiceClient) RequestToPay(ctx context.Context, in *RequestToPayRequest, opts ...grpc.CallOption) (*RequestToPayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestToPayResponse)
	err := c.cc.Invoke(ctx, MTNService_RequestToPay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mTNServiceClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, MTNService_Transfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mTNServiceClient) GetRequestToPayStatus(ctx context.Context, in *GetRequestToPayStatusRequest, opts ...grpc.CallOption) (*GetRequestToPayStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRequestToPayStatusResponse)
	err := c.cc.Invoke(ctx, MTNService_GetRequestToPayStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mTNServiceClient) GetTransferStatus(ctx context.Context, in *GetTransferStatusRequest, opts ...grpc.CallOption) (*GetTransferStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransferStatusResponse)
	err := c.cc.Invoke(ctx, MTNService_GetTransferStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mTNServiceClient) GetAccountBalance(ctx context.Context, in *GetAccountBalanceRequest, opts ...grpc.CallOption) (*GetAccountBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountBalanceResponse)
	err := c.cc.Invoke(ctx, MTNService_GetAccountBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mTNServiceClient) ValidateAccountHolder(ctx context.Context, in *ValidateAccountHolderRequest, opts ...grpc.CallOption) (*ValidateAccountHolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateAccountHolderResponse)
	err := c.cc.Invoke(ctx, MTNService_ValidateAccountHolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MTNServiceServer is the server API for MTNService service.
// All implementations must embed UnimplementedMTNServiceServer
// for forward compatibility.
//
// MTNService offers APIs specifically for MTN Mobile Money
type MTNServiceServer interface {
	// Request a payment from a customer (Collection)
	RequestToPay(context.Context, *RequestToPayRequest) (*RequestToPayResponse, error)
	// Transfer to a customer (Disbursement)
	Transfer(context.Context, *TransferRequest) (*TransferResponse, error)
	// Get the status of a request to pay transaction
	GetRequestToPayStatus(context.Context, *GetRequestToPayStatusRequest) (*GetRequestToPayStatusResponse, error)
	// Get the status of a transfer transaction
	GetTransferStatus(context.Context, *GetTransferStatusRequest) (*GetTransferStatusResponse, error)
	// Get account balance
	GetAccountBalance(context.Context, *GetAccountBalanceRequest) (*GetAccountBalanceResponse, error)
	// Validate account holder
	ValidateAccountHolder(context.Context, *ValidateAccountHolderRequest) (*ValidateAccountHolderResponse, error)
	mustEmbedUnimplementedMTNServiceServer()
}

// UnimplementedMTNServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMTNServiceServer struct{}

func (UnimplementedMTNServiceServer) RequestToPay(context.Context, *RequestToPayRequest) (*RequestToPayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestToPay not implemented")
}
func (UnimplementedMTNServiceServer) Transfer(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedMTNServiceServer) GetRequestToPayStatus(context.Context, *GetRequestToPayStatusRequest) (*GetRequestToPayStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequestToPayStatus not implemented")
}
func (UnimplementedMTNServiceServer) GetTransferStatus(context.Context, *GetTransferStatusRequest) (*GetTransferStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransferStatus not implemented")
}
func (UnimplementedMTNServiceServer) GetAccountBalance(context.Context, *GetAccountBalanceRequest) (*GetAccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBalance not implemented")
}
func (UnimplementedMTNServiceServer) ValidateAccountHolder(context.Context, *ValidateAccountHolderRequest) (*ValidateAccountHolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAccountHolder not implemented")
}
func (UnimplementedMTNServiceServer) mustEmbedUnimplementedMTNServiceServer() {}
func (UnimplementedMTNServiceServer) testEmbeddedByValue()                    {}

// UnsafeMTNServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MTNServiceServer will
// result in compilation errors.
type UnsafeMTNServiceServer interface {
	mustEmbedUnimplementedMTNServiceServer()
}

func RegisterMTNServiceServer(s grpc.ServiceRegistrar, srv MTNServiceServer) {
	// If the following call pancis, it indicates UnimplementedMTNServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MTNService_ServiceDesc, srv)
}

func _MTNService_RequestToPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestToPayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MTNServiceServer).RequestToPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MTNService_RequestToPay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MTNServiceServer).RequestToPay(ctx, req.(*RequestToPayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MTNService_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MTNServiceServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MTNService_Transfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MTNServiceServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MTNService_GetRequestToPayStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestToPayStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MTNServiceServer).GetRequestToPayStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MTNService_GetRequestToPayStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MTNServiceServer).GetRequestToPayStatus(ctx, req.(*GetRequestToPayStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MTNService_GetTransferStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransferStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MTNServiceServer).GetTransferStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MTNService_GetTransferStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MTNServiceServer).GetTransferStatus(ctx, req.(*GetTransferStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MTNService_GetAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MTNServiceServer).GetAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MTNService_GetAccountBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MTNServiceServer).GetAccountBalance(ctx, req.(*GetAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MTNService_ValidateAccountHolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAccountHolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MTNServiceServer).ValidateAccountHolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MTNService_ValidateAccountHolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MTNServiceServer).ValidateAccountHolder(ctx, req.(*ValidateAccountHolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MTNService_ServiceDesc is the grpc.ServiceDesc for MTNService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MTNService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "providers.MTNService",
	HandlerType: (*MTNServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestToPay",
			Handler:    _MTNService_RequestToPay_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _MTNService_Transfer_Handler,
		},
		{
			MethodName: "GetRequestToPayStatus",
			Handler:    _MTNService_GetRequestToPayStatus_Handler,
		},
		{
			MethodName: "GetTransferStatus",
			Handler:    _MTNService_GetTransferStatus_Handler,
		},
		{
			MethodName: "GetAccountBalance",
			Handler:    _MTNService_GetAccountBalance_Handler,
		},
		{
			MethodName: "ValidateAccountHolder",
			Handler:    _MTNService_ValidateAccountHolder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mtn_provider.proto",
}
